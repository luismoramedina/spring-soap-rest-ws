package net.webservicex;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.8
 * 2015-03-17T12:51:09.996+01:00
 * Generated source version: 2.7.8
 * 
 */
@WebServiceClient(name = "TranslateService", 
                  wsdlLocation = "file:/c:/data/Temp/TranslateService.wsdl",
                  targetNamespace = "http://www.webservicex.net") 
public class TranslateService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.webservicex.net", "TranslateService");
    public final static QName TranslateServiceSoap = new QName("http://www.webservicex.net", "TranslateServiceSoap");
    public final static QName TranslateServiceSoap12 = new QName("http://www.webservicex.net", "TranslateServiceSoap12");
    public final static QName TranslateServiceHttpGet = new QName("http://www.webservicex.net", "TranslateServiceHttpGet");
    public final static QName TranslateServiceHttpPost = new QName("http://www.webservicex.net", "TranslateServiceHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("file:/c:/data/Temp/TranslateService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(TranslateService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/c:/data/Temp/TranslateService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public TranslateService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TranslateService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TranslateService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public TranslateService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public TranslateService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    //This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
    //API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
    //compliant code instead.
    public TranslateService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     *
     * @return
     *     returns TranslateServiceSoap
     */
    @WebEndpoint(name = "TranslateServiceSoap")
    public TranslateServiceSoap getTranslateServiceSoap() {
        return super.getPort(TranslateServiceSoap, TranslateServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TranslateServiceSoap
     */
    @WebEndpoint(name = "TranslateServiceSoap")
    public TranslateServiceSoap getTranslateServiceSoap(WebServiceFeature... features) {
        return super.getPort(TranslateServiceSoap, TranslateServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns TranslateServiceSoap
     */
    @WebEndpoint(name = "TranslateServiceSoap12")
    public TranslateServiceSoap getTranslateServiceSoap12() {
        return super.getPort(TranslateServiceSoap12, TranslateServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TranslateServiceSoap
     */
    @WebEndpoint(name = "TranslateServiceSoap12")
    public TranslateServiceSoap getTranslateServiceSoap12(WebServiceFeature... features) {
        return super.getPort(TranslateServiceSoap12, TranslateServiceSoap.class, features);
    }
    /**
     *
     * @return
     *     returns TranslateServiceHttpGet
     */
    @WebEndpoint(name = "TranslateServiceHttpGet")
    public TranslateServiceHttpGet getTranslateServiceHttpGet() {
        return super.getPort(TranslateServiceHttpGet, TranslateServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TranslateServiceHttpGet
     */
    @WebEndpoint(name = "TranslateServiceHttpGet")
    public TranslateServiceHttpGet getTranslateServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(TranslateServiceHttpGet, TranslateServiceHttpGet.class, features);
    }
    /**
     *
     * @return
     *     returns TranslateServiceHttpPost
     */
    @WebEndpoint(name = "TranslateServiceHttpPost")
    public TranslateServiceHttpPost getTranslateServiceHttpPost() {
        return super.getPort(TranslateServiceHttpPost, TranslateServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TranslateServiceHttpPost
     */
    @WebEndpoint(name = "TranslateServiceHttpPost")
    public TranslateServiceHttpPost getTranslateServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(TranslateServiceHttpPost, TranslateServiceHttpPost.class, features);
    }

}
